[{"/Users/chaddornfeld/Projects/Post-Prime/scss-assessment/src/index.js":"1","/Users/chaddornfeld/Projects/Post-Prime/scss-assessment/src/App.js":"2","/Users/chaddornfeld/Projects/Post-Prime/scss-assessment/src/MultiSelect/MultiSelect.js":"3","/Users/chaddornfeld/Projects/Post-Prime/scss-assessment/src/SingleSelect/SingleSelect.js":"4"},{"size":197,"mtime":1612897613702,"results":"5","hashOfConfig":"6"},{"size":1396,"mtime":1612903703206,"results":"7","hashOfConfig":"6"},{"size":2218,"mtime":1612913339226,"results":"8","hashOfConfig":"6"},{"size":1787,"mtime":1612913679831,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"u2snf8",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/chaddornfeld/Projects/Post-Prime/scss-assessment/src/index.js",[],["20","21"],"/Users/chaddornfeld/Projects/Post-Prime/scss-assessment/src/App.js",[],"/Users/chaddornfeld/Projects/Post-Prime/scss-assessment/src/MultiSelect/MultiSelect.js",["22"],"import React, {useState, useEffect} from 'react'\nimport './MultiSelect.scss'\n\n// this is a stub for you to develop the following\n\n/*\n    PART 2 - OPTIONAL \n    \n    Develop a component similar to the single select that allows multiple options to be selected. \n\n    This will include an ability to toggle each option, and then click a submit button for grading.\n\n    Grading will indicate visually on each option if it was correct or not. This implies 4 states for each button - selected and correct, selected and incorrect, not selected and correct, not selected and incorrect.\n\n    The generic feedback shown in the data is binary - either you got it 100% correct and get the correct feedback, or you don't. \n*/\n\nconst MultiSelect = props => {\n\n    const [selected, setSelected] = useState(-1);\n\n    const handleSelect = (i) => {\n        if(selected === -1) setSelected(i)\n    }\n\n    const selectedOption = props.data.options[selected]\n\n    return (\n        <div className={`MultiSelect`}>\n            {JSON.stringify([selected, props])}\n            <h1>\n                {props.data.questionText}\n            </h1>\n            {\n                selected === -1 &&\n                props.data.options.map((option, optionIndex) => {\n                    return <button onClick={()=>{handleSelect(optionIndex)}}>{option.text}</button>\n                })\n            }\n            {\n                selected > -1 &&\n                <div className={`feedback ${selectedOption.correct ? 'correct' : 'incorrect'}`}>\n                    <h1>\n                        {selectedOption.correct ?\n                            props.data.feedback.correct.header\n                        :\n                            props.data.feedback.incorrect.header\n                        }\n                    </h1>\n                    <p>\n                        {selectedOption.correct ?\n                            props.data.feedback.correct.body\n                        :\n                            props.data.feedback.incorrect.body\n                        }\n                    </p>\n                    <button onClick={props.onComplete}>OK</button>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default MultiSelect","/Users/chaddornfeld/Projects/Post-Prime/scss-assessment/src/SingleSelect/SingleSelect.js",["23"],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":1,"column":26,"nodeType":"30","messageId":"31","endLine":1,"endColumn":35},{"ruleId":"28","severity":1,"message":"29","line":1,"column":26,"nodeType":"30","messageId":"31","endLine":1,"endColumn":35},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]